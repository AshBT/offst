use crypto::identity::{PublicKey, Signature};
use crypto::uid::Uid;
use crypto::hash::HashResult;
use crypto::crypto_rand::RandValue;

use crate::funder::messages::FriendsRoute;

#[derive(Debug)]
pub enum RouteRequest {
    /// Request a direct route of friends from the source node to the destination
    /// node.
    Direct((PublicKey, PublicKey)),
    /// A loop from myself through given friend, back to myself.
    /// This is used for money rebalance when we owe the friend money.
    /// self -> friend -> ... -> ... -> self
    LoopFromFriend(PublicKey),
    /// A loop from myself back to myself through given friend.
    /// This is used for money rebalance when the friend owe us money.
    /// self -> ... -> ... -> friend -> self
    LoopToFriend(PublicKey),
}

/// IndexClient -> IndexServer
#[derive(Debug)]
pub struct RequestFriendsRoute {
    request_route_id: Uid,
    /// Wanted capacity for the route. 
    /// 0 means we want to optimize for capacity?
    capacity: u128,
    route_request: RouteRequest,
}

#[derive(Debug)]
pub struct FriendsRouteWithCapacity {
    route: FriendsRoute,
    capacity: u128,
}

/// IndexServer -> IndexClient
#[derive(Debug)]
pub struct ResponseFriendsRoute {
    request_route_id: Uid,
    routes: Vec<FriendsRouteWithCapacity>,
}

#[derive(Debug)]
pub struct UpdateFriend {
    /// Friend's public key
    public_key: PublicKey,
    /// To denote remote requests closed, assign 0 to sendCapacity
    send_capacity: u128,
    /// To denote local requests closed, assign 0 to recvCapacity
    recv_capacity: u128,
}


/// IndexClient -> IndexServer
#[derive(Debug)]
pub enum Mutation {
    UpdateFriend(UpdateFriend),
    RemoveFriend(PublicKey),
}

#[derive(Debug)]
pub struct MutationsUpdate {
    /// Public key of the node sending the mutations.
    node_public_key: PublicKey,
    /// List of mutations to relationships with direct friends.
    mutations : Vec<Mutation>,
    /// A time hash (Given by the server previously). 
    /// This is used as time, proving that this message was signed recently.
    time_hash: HashResult,
    /// A randomly generated sessionId. The counter is related to this session Id.
    session_id: Uid,
    /// Incrementing counter, making sure that mutations are received in the correct order.
    /// For a new session, the counter should begin from 0 and increment by 1 for every MutationsUpdate message.
    /// When a new connection is established, a new sesionId should be randomly generated.
    counter: u64,
    /// Rand nonce, used as a security measure for the next signature.
    rand_nonce: RandValue,
    /// signature(sha_512_256("MUTATIONS_UPDATE") || 
    ///           nodePublicKey ||
    ///           mutation || 
    ///           timeHash || 
    ///           counter || 
    ///           randNonce)
    signature: Signature,
}

#[derive(Debug)]
pub struct TimeProofLink {
    /// List of hashes that produce a certain hash
    /// sha_512_256("TIME_HASH" || hashes)
    hashes: Vec<HashResult>,
    /// Index pointing to a specific hash on the hashes list.
    index: u32,
}

#[derive(Debug)]
pub struct ForwardMutationsUpdate {
    mutations_update: MutationsUpdate,
    /// A proof that MutationsUpdate was signed recently
    /// Receiver should verify:
    /// - sha_512_256(hashes[0]) == MutationsUpdate.timeHash,
    /// - For all i < n - 1 : hashes[i][index[i]] == sha_512_256(hashes[i+1])
    /// - hashes[n-1][index[n-1]] is some recent time hash generated by the receiver.
    time_proof_chain: Vec<TimeProofLink>,
}

#[derive(Debug)]
pub enum IndexServerToClient {
    TimeHash(HashResult),
    ResponseFriendsRoute(ResponseFriendsRoute),
}


#[derive(Debug)]
pub enum IndexClientToServer {
    MutationsUpdate(MutationsUpdate),
    RequestFriendsRoute(RequestFriendsRoute),
}


#[derive(Debug)]
pub enum IndexServerToServer {
    TimeHash(HashResult),
    ForwardMutationsUpdate(ForwardMutationsUpdate),
}
